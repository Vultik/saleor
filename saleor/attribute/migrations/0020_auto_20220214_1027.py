# Generated by Django 3.2.12 on 2022-02-14 10:27

from collections import defaultdict

from django.db import migrations
from django.db.models import Exists, OuterRef


def fetch_reference_id_from_slug(slug):
    ref_id = slug.split("_")[1]
    return int(ref_id)


def import_attribute_values(attr_values_qs, Model):
    attr_values_to_update = []
    attr_values_to_delete = set()

    attr_value_map = defaultdict(list)
    for attr_value in attr_values_qs:

        ref_id = fetch_reference_id_from_slug(attr_value.slug)
        attr_value_map[ref_id].append(attr_value)

    model_queryset = Model.objects.filter(pk__in=attr_value_map.keys())
    model_in_bulk = model_queryset.in_bulk()

    model_ids = set(model_queryset.values_list("id", flat=True))
    ids_to_delete = set(attr_value_map.keys()) - model_ids
    ids_to_update = set(attr_value_map.keys()) - set(ids_to_delete)

    for id_to_delete in ids_to_delete:
        attr_values = attr_value_map[id_to_delete]
        for attr_value in attr_values:
            attr_values_to_delete.add(attr_value.id)

    if Model.__name__ == "Page":
        for id_to_update in ids_to_update:
            attr_values = attr_value_map[id_to_update]
            for attr_value in attr_values:
                attr_value.reference_page = model_in_bulk[id_to_update]
            attr_values_to_update.extend(attr_values)

    if Model.__name__ == "Product":
        for id_to_update in ids_to_update:
            attr_values = attr_value_map[id_to_update]
            for attr_value in attr_values:
                attr_value.reference_product = model_in_bulk[id_to_update]
            attr_values_to_update.extend(attr_values)

    return attr_values_to_update, attr_values_to_delete


def migrate_model_field_data(apps, schema):
    AttributeValue = apps.get_model("attribute", "AttributeValue")
    Attribute = apps.get_model("attribute", "Attribute")
    Page = apps.get_model("page", "Page")
    Product = apps.get_model("product", "Product")

    queryset = AttributeValue.objects.filter(
        Exists(
            Attribute.objects.filter(
                id=OuterRef("attribute_id"), input_type="reference", entity_type="Page"
            )
        )
    )
    for batch_pks in queryset_in_batches(queryset):
        batch = AttributeValue.objects.filter(pk__in=batch_pks)
        attr_values_to_update, attr_values_to_delete = import_attribute_values(
            batch, Page
        )
        AttributeValue.objects.bulk_update(attr_values_to_update, ["reference_page"])
        AttributeValue.objects.filter(pk__in=attr_values_to_delete).delete()

    queryset = AttributeValue.objects.filter(
        Exists(
            Attribute.objects.filter(
                id=OuterRef("attribute_id"),
                input_type="reference",
                entity_type="Product",
            )
        )
    )
    for batch_pks in queryset_in_batches(queryset):
        batch = AttributeValue.objects.filter(pk__in=batch_pks)
        attr_values_to_update, attr_values_to_delete = import_attribute_values(
            batch, Product
        )
        AttributeValue.objects.bulk_update(attr_values_to_update, ["reference_product"])
        AttributeValue.objects.filter(pk__in=attr_values_to_delete).delete()


def queryset_in_batches(queryset):
    """Slice a queryset into batches.

    Input queryset should be sorted be pk.
    """
    start_pk = 0

    while True:
        qs = queryset.filter(pk__gt=start_pk)[:2000]
        pks = list(qs.values_list("pk", flat=True))

        if not pks:
            break

        yield pks

        start_pk = pks[-1]


class Migration(migrations.Migration):

    dependencies = [
        ("attribute", "0019_auto_20220214_1025"),
    ]

    operations = [
        migrations.RunPython(
            migrate_model_field_data,
            migrations.RunPython.noop,
        )
    ]
